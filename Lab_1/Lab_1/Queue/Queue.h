#pragma once

#include "../Matrix/Matrix.h"

//Класс очереди
class Queue
{

public:
	
	/*
	конструктор по умолчанию
	*/
	Queue();

	/*
	деструктор
	*/
	~Queue();

	/*
	получение длины очереди
	return - значение длины очереди
	*/
	int getLength();

	/*
	добавление в конец очереди
	args:
		matrix - ссылка на вставляемую матрицу
	*/
	void push(Matrix& matrix);

	/*
	добавление по индексу
	args:
		matrix - ссылка на вставляемую матрицу
		index - индекс вставки
	Выбрасывает исключение,	если index выходит за пределы очереди
	*/
	void push(Matrix& matrix, int index);

	/*
	извлечение из начала очереди
	return - первый элемент очереди
	выбрасывает исключение если очередь уже пуста
	*/
	Matrix& pop();

	/*
	извлечение по индексу
	return - элемент очереди под номером index
	выбрасывает исключение, если очередь уже пуста или если индекс выходит за пределы очереди
	*/
	Matrix& pop(int index);

	/*
	очистка очереди
	*/
	void clear();

	/*
	поиск по структуре
	args:
		matrix - ссылка на искомый объект
	return - индекс, под которым находится объект matrix в очереди
	*/
	int search(Matrix& matrix);
	
	/*
	вывод в консоль
	метод демонстрирует динамический полиморфизм
	*/
	void print();

private:

	//класс узла
	class Node
	{
	public:

		//ссылка на матрицу
		Matrix& _data;

		//указатели на следующий и предыдущий элементы
		Node* _next, * _prev;

		//конструктор с параметром
		Node(Matrix& matrix);

	};

	//длина очереди
	int _length;

	//указатели на начало и конец очереди
	Node* _head, * _tail;
};


