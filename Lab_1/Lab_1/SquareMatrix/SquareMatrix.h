#pragma once

#include "../Matrix/Matrix.h"

//класс квадратной матрицы
class SquareMatrix : public Matrix
{
public:

	/*
	Конструктор по умолчанию
	Создает матрицу размера  1х1 со значением 0
	*/
	SquareMatrix();
	
	/*
	конструктор с параметрами
	создает матрицу ранга rank и коэффициентами из matrix
	args:
		rank - ранг матрицы
		matrix - двумерный массив коэффициентов
	выбрасывает исключение, если rank меньше 0, а в matrix встречен нулевой указатель
	*/
	SquareMatrix(int rank, double ** matrix);

	/*
	конструктор копирования
	копирует содержимое объекта matrix
	args:
		matrix - копируемая матрица
	*/
	SquareMatrix(const SquareMatrix& matrix);



	/*
	изменение матрицы
	Изменяет текущую матрицу на входную
	args:
		rows - количество строк в матрице
		cols - количество столбцов в матрице
		matrix - матрица
	выбрасывает исключение, если rows не равен cols, если rows или cols меньше 0, а в matrix встречен нулевой указатель
	*/
	virtual void setMatrix(int rows, int cols, double** matrix) override;

	/*
	изменение матрицы
	Изменяет текущую матрицу на входную
	args:
		rank - ранг матрицы
		matrix - матрица
	выбрасывает исключение, rank меньше 0, а в matrix встречен нулевой указатель
	*/
	virtual void setMatrix(int rank, double ** matrix);



	/*
		Вычисление определителя матрицы
		Вычисляет значение определителя матрицы с помощью разложения по строке и миноров
		return - значение определителя
	*/
	double determinant();

	/*
		Оператор ()
		return - значение определителя матрицы
	*/
	double operator()();

	

	/*
		Оператор присваивания матриц
		args:
			matrix - присваиваемая матрица
		return - ссылка на текущую матрицу
		ссылка необходима для того, чтобы сделать множественное присваивание
		к примеру, obj1 = obj2 = obj3 = obj4;
	*/
	SquareMatrix& operator=(const SquareMatrix& matrix);

	/*
		Оператор присваивания матриц
		args:
			matrix - присваиваемая матрица
		return - ссылка на текущую матрицу
		ссылка необходима для того, чтобы сделать множественное присваивание
		к примеру, obj1 = obj2 = obj3 = obj4;
		возвращает исключение, если matrix - прямоугольная матрица
	*/
	SquareMatrix& operator=(const Matrix& matrix);


	/*
	Функция вывода в консоль содержимого матрицы и класса
	Нужна для демонстрации полиморфизма
	*/
	virtual void print() override;

protected:

	/*
	Вычисление минора элемента, стоящего в строке row и стобце col матрицы matrix ранга rank
	args:
		row - строка, в которой находится элемент, минор которого нужно вычислить
		col - столбец, в котором находится элемент, минор которого нужно вычислить
		rank - ранг матрицы, в которой находится элемент, минор которого нужно вычислить
		matrix - сама матрица ранга rank
	return - значение минора
	*/
	double minor(int row, int col, int rank, double** matrix);
};